import base64
import json
import re
from io import BytesIO
from uuid import UUID

import aio_pika
from aiogram import Router, F, types, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from app.armq.connection import channel_pool
from app.tg_bot.keyboards.for_exhibit import get_comment_and_photo_kb
from app.tg_bot.states.get_data_states import GetDataState
from app.config_reader import config
from app.database.cruds import DatabaseCRUDS

router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def command_start_handler(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!üëã\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫-–≥–∏–¥ –ø–æ –º—É–∑–µ–π–Ω—ã–º —ç–∫—Å–ø–æ–Ω–∞—Ç–∞–º!\n\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µüì∑")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@router.message(F.photo)
async def command_download_photo(message: types.Message, bot: Bot, db: DatabaseCRUDS, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await message.bot.get_file(file_id)

    file_path = file.file_path
    photo_bytes_io = BytesIO()
    await bot.download_file(file_path, photo_bytes_io)
    photo_bytes_io.seek(0)
    photo_base64 = base64.b64encode(photo_bytes_io.read()).decode("utf-8")
    async with channel_pool.acquire() as channel:
        await channel.default_exchange.publish(
            aio_pika.Message(
                body=json.dumps({'photo': photo_base64,
                                 'tg_id': message.from_user.id}).encode('utf-8')
            ),
            routing_key=config.CV_QUEUE_NAME,
        )
    await message.answer("–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
@router.callback_query(lambda callback: re.search(r'add_comment_', callback.data))
async def send_random_value(callback: types.CallbackQuery, db: DatabaseCRUDS, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!")
    await state.set_state(GetDataState.add_comment)
    exhibit_id = UUID(callback.data.split('_')[-1])
    await state.update_data(exhibit_id=str(exhibit_id))


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"
@router.callback_query(F.data == "add_photo")
async def send_random_value(callback: types.CallbackQuery, db: DatabaseCRUDS, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫!")
    await callback.answer()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
@router.callback_query(lambda callback: re.search(r"get_comments_", callback.data))
async def send_random_value(callback: types.CallbackQuery, db: DatabaseCRUDS, state: FSMContext):
    await callback.message.answer("–°–ø—Å–∏–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
    exhibit_id = UUID(callback.data.split('_')[-1])
    comments = await db.get_comments_by_exhibit_id(exhibit_id)
    sent_mapping = {
        0: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        1: "–ù–µ–∏ÃÜ—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        2: "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
    }
    comments_string = '\n\n\n'.join([comment.comment + '\n' + sent_mapping[comment.sentiment] for comment in comments])
    await callback.message.answer(comments_string, reply_markup=get_comment_and_photo_kb(exhibit_id))


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(GetDataState.add_comment, F.text)
async def cmd_start(message: types.Message, db: DatabaseCRUDS, state: FSMContext):
    data = await state.get_data()
    comment = await db.add_comment(message.text, UUID(data.get('exhibit_id')))
    async with channel_pool.acquire() as channel:
        await channel.default_exchange.publish(
            aio_pika.Message(
                body=json.dumps({'message': message.text,
                                 'exhibit_id': data.get('exhibit_id'),
                                 'tg_id': message.from_user.id,
                                 'comment_id': str(comment.id)}).encode('utf-8')
            ),
            routing_key=config.NLP_QUEUE_NAME,
        )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await state.clear()
